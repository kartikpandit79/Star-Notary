/* ===== Persist data with LevelDB ===================================
|  Learn more: level: https://github.com/Level/level     |
|  =============================================================*/

const level = require('level');
const chainDB = './chaindata';
const db = level (chainDB)


//Add data to level DB with key/value pair
function addLevelDBData(key,value){
   return db.put(key,value) //return promise
}

//Get data from level DB with key
function getLevelDBData(key){
   return new Promise((resolve,reject)=>{
      db.get(key).then(res=>{resolve(res)})
         .catch(err=>{reject(err)})
   })
}

//Add data to levelDB with value
function addDataToLevelDB(height,value){
   return new Promise((resolve,reject)=>{
      db.createReadStream()
         .on('data',function (data){

         })
         .on('error',function (error){
            reject(error)
         })
         .on('close',function (close){
            addLevelDBData(height,value).then(()=>{
               resolve("Block#"+ height+"Added")
            })
            .catch(()=>{
               reject("Block#"+height+"not Added")
            })
         })
   })
}

//Implementing Block count
function getBlockCount(){
   let man = []
   return new Promise((resolve,reject)=>{
      db.createReadStream()
         .on('data',function (data){
            man.push(data.key)
         })
         .on('err',function (err){
            reject(err)
         })
         .on('close',function(close){
            resolve(man.length)
         })
   })
}

//Implementing getBlock by hash function
function getBlockByHash(hash){
   // let cat = []
   let block = ""
   return new Promise((resolve,reject)=>{
      db.createReadStream()
         .on('data',function (data){
            if(JSON.parse(data.value).hash == hash){
               block = data
               // console.log(block)
               /* block = data.key
               console.log(block)*/
            }            
         })
         .on('err',function (err){
            reject(err)
         })
         .on('close',function (close){
            resolve(block)
         })
   })
}

//Implementing the getBlock by wallet address function 
function getBlockByWalletAddress(walletAddress){
   let mat =[]
   return new Promise((resolve,reject)=>{

      db.createReadStream()
      .on('data',function (data){
         if(data.key!=0){
            if(JSON.parse(data.value).body.address === walletAddress){
               mat.push(data.value)
            }
         }         
      })
      .on('err',function (err){
         reject(err)
      })
      .on('close',function (close){
         resolve(mat)
         // resolve("KKKKKKKKKKKKKKKK")
         // console.log("KKKKKKKKKKKK")
      })
   })
   }

// (function theLoop(i){
//    setTimeout(function (){
//       addDataToLevelDB(i,"testdata").then(res=>{console.log(res)})
//       i++;
//       if(i<4){theLoop(i)}
//    },200)
// })(0)

//Code snippet for testing
// let car = 0
// let bike = {
//    hi: "Hello",
//    hru: "Fine",
//    wru: "Banglore",
//    nu: "USA",
//    hash: "3"
// }
// // console.log(JSON.stringify(bike))

// // addDataToLevelDB(car,bike).then(res=>{console.log(res)})
// addLevelDBData(car,JSON.stringify(bike)).then(()=>{console.log("DOne ")})

// // getBlockByHash(3).then(res=>{console.log(res)})


module.exports.addLevelDBData = addLevelDBData;
module.exports.getLevelDBData = getLevelDBData;
module.exports.addDataToLevelDB = addDataToLevelDB;
module.exports.getBlockByHash = getBlockByHash;
module.exports.getBlockByWalletAddress = getBlockByWalletAddress;
module.exports.getBlockCount = getBlockCount;
